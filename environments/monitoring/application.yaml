apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: izza-monitoring
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: "61.7.2"
    helm:
      values: |
        alertmanager:
          enabled: true
          config:
            global:
              slack_api_url_file: '/etc/alertmanager/secrets/alertmanager-slack-webhook/SLACK_WEBHOOK_URL'
            route:
              group_by: ['alertname', 'job']
              group_wait: 30s
              group_interval: 30m
              repeat_interval: 1h
              receiver: 'slack-notifications'
              routes:
                - receiver: 'slack-notifications'
                  matchers:
                    - severity = "critical"
                  group_wait: 10s
                  repeat_interval: 10m
                  continue: true
            receivers:
              - name: 'slack-notifications'
                slack_configs:
                  - channel: '#k8s-alert'
                    send_resolved: true
                    title: '[{{ .Status | toUpper }}] {{ .CommonLabels.alertname }} ({{ .CommonLabels.severity | toUpper }})'
                    text: |
                      *Summary:* {{ .CommonAnnotations.summary }}
                      *Description:* {{ .CommonAnnotations.description }}
                      *Instance:* `{{ .CommonLabels.instance }}`
          alertmanagerSpec:
            replicas: 1
            secrets:
              - alertmanager-slack-webhook

        grafana:
          enabled: true
          replicaCount: 1
          serviceAccount:
            create: true
            annotations:
              eks.amazonaws.com/role-arn: arn:aws:iam::177716289679:role/eks-grafana-cloudwatch
          persistence:
            enabled: true
            size: 1Gi
            storageClassName: gp2
          sidecar:
            dashboards:
              enabled: true
              label: grafana_dashboard
              labelValue: "1"
              folder: /tmp/dashboards
              searchNamespace: ALL
              provider:
                allowUiUpdates: true
            datasources:
              enabled: true
              label: grafana_datasource
              labelValue: "1"
          additionalDataSources:
            - name: CloudWatch-RDS
              isDefault: false
              type: cloudwatch
              access: proxy
              jsonData:
                authType: default
                defaultRegion: ap-northeast-2
              uid: cloudwatch-rds
              editable: true
          env:
            GF_INSTALL_PLUGINS: ""
            AWS_SDK_LOAD_CONFIG: "true"
            AWS_DEFAULT_REGION: ap-northeast-2
          ingress:
            enabled: true
            ingressClassName: alb
            annotations:
              alb.ingress.kubernetes.io/scheme: internet-facing
              alb.ingress.kubernetes.io/target-type: ip
              alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
              alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60
              alb.ingress.kubernetes.io/group.order: "10"
              alb.ingress.kubernetes.io/group.name: observability
            hosts:
              - grafana.izza-nopizza.com
            paths:
              - path: /
                pathType: Prefix
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: workload
                        operator: In
                        values:
                          - system

        prometheus:
          enabled: true
          prometheusSpec:
            serviceMonitorSelectorNilUsesHelmValues: false
            replicas: 1
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 200m
                memory: 256Mi
            retention: 10d
            retentionSize: 20GiB
            scrapeInterval: 30s
            storageSpec:
              volumeClaimTemplate:
                spec:
                  accessModes:
                  - ReadWriteOnce
                  resources:
                    requests:
                      storage: 5Gi
                  storageClassName: gp2
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                    - matchExpressions:
                      - key: workload
                        operator: In
                        values:
                          - system
          ingress:
            enabled: true
            ingressClassName: alb
            annotations:
              alb.ingress.kubernetes.io/scheme: internet-facing
              alb.ingress.kubernetes.io/target-type: ip
              alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
              alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60
              alb.ingress.kubernetes.io/group.order: "10"
              alb.ingress.kubernetes.io/group.name: observability
            hosts:
              - prometheus.izza-nopizza.com
            paths:
              - path: /
                pathType: Prefix

  destination:
    server: https://kubernetes.default.svc
    namespace: metric
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true